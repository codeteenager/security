import{_ as s,c as l,o as a,V as n}from"./chunks/framework.1f99f08c.js";const D=JSON.parse('{"title":"sql注入","description":"","frontmatter":{},"headers":[],"relativePath":"web/sql.md","filePath":"web/sql.md","lastUpdated":1670077213000}'),o={name:"web/sql.md"},e=n('<h1 id="sql注入" tabindex="-1">sql注入 <a class="header-anchor" href="#sql注入" aria-label="Permalink to &quot;sql注入&quot;">​</a></h1><p>SQL 注入产生的原因是由于开发对用户的输入数据未做有效过滤，直接引用 SQL 语句执行，导致原本的数据被当作 SQL 语句执行。通常来说，SQL 注入分为数字型和字符型注入，我们主要通过注入参数类型来判断。</p><p>它和xss攻击有点像，数据变成了程序。 例如：</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">table</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ${id};</span></span>\n<span class="line"><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;">用户传入的id为 </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">，最终sql为select </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">table</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> 这就形成了sql注入</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="sql注入的危害" tabindex="-1">sql注入的危害 <a class="header-anchor" href="#sql注入的危害" aria-label="Permalink to &quot;sql注入的危害&quot;">​</a></h2><ul><li>猜解密码</li><li>获取数据</li><li>删库删表</li><li>拖库</li></ul><h2 id="sql注入防御" tabindex="-1">sql注入防御 <a class="header-anchor" href="#sql注入防御" aria-label="Permalink to &quot;sql注入防御&quot;">​</a></h2><ul><li>关闭错误输出，不要将sql错误返回给浏览器</li><li>检查数据类型</li><li>对数据进行转义</li><li>使用参数化查询</li><li>使用ORM(对象关系映射)</li></ul>',8),p=[e];function t(r,c,C,i,A,y){return a(),l("div",null,p)}const F=s(o,[["render",t]]);export{D as __pageData,F as default};
