import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.c2ca2265.js";const u=JSON.parse('{"title":"上传","description":"","frontmatter":{},"headers":[],"relativePath":"web/upload.md","filePath":"web/upload.md","lastUpdated":1683282608000}'),p={name:"web/upload.md"},e=n(`<h1 id="上传" tabindex="-1">上传 <a class="header-anchor" href="#上传" aria-label="Permalink to &quot;上传&quot;">​</a></h1><p>文件上传漏洞正是在文件上传功能中，由于对用户上传的文件数据未做有效检测或过滤不严，导致上传的恶意文件被服务端解释器解析执行，利用漏洞可获取系统控制权。</p><p>它的基本流程是首先上传文件，然后回显，再次访问上传的文件，上传的文件被当成程序解析。当我们上传的是php类的文件的话就会被浏览器解析执行。</p><h2 id="上传漏洞防御" tabindex="-1">上传漏洞防御 <a class="header-anchor" href="#上传漏洞防御" aria-label="Permalink to &quot;上传漏洞防御&quot;">​</a></h2><p>对于上传漏洞的修复和防御，可以从以下几方面入手：</p><ul><li>严格检测上传文件后缀名、文件头、Content-type，尽量采用白名单方式限制。</li><li>重编码文件，比如对图片或视频做转换处理。</li><li>限制文件大小，避免被恶意上传大文件造成存储空间不足，进而网站无法正常运行。</li><li>在服务端本地检测 Webshell，发现后告警出来，人工确认后再删除，同时排查是否为外部入侵导致的，查日志去追踪可能存在的漏洞来源。</li><li>使用 WAF 拦截木马的上传，这种可能比较容易被绕过。</li><li>使用 RASP 在服务端中对于执行脚本的关键函数进行 hook，比如 php eval，在触发外部数据输入执行时就告警和阻断。</li><li>限制上传目录可不解析，不同的服务器有不同的配置方式，比如 Nginx 可按如下方式配置。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">location </span><span style="color:#F97583;">~*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">^</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">uploads</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">\\.(php</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">php5)$ </span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    deny all;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">location </span><span style="color:#D73A49;">~*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">^</span><span style="color:#032F62;">/uploads/</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">\\.(php</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">php5)$ </span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    deny all;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>上传文件重命名，建议使用随机文件名。</li><li>隐藏上传文件路径相关信息，比如关闭错误回显。</li></ul>`,8),o=[e];function t(c,r,i,d,E,y){return a(),l("div",null,o)}const _=s(p,[["render",t]]);export{u as __pageData,_ as default};
